--------------------------------------------------------
--  INLJ Algorithm
--------------------------------------------------------
DECLARE 
    -- %ROWTYPE: RETURN THE SAME TABLE STRUCTURE
    CURSOR DATASTREAM_CURSOR IS SELECT * FROM DATASTREAM;
    TYPE DATA_DATASTREAM IS TABLE OF DATASTREAM_CURSOR%ROWTYPE;
    DATA_INTEGRATION DATA_DATASTREAM;
    --  ELEMENTS(THE ADDITIONAL DATA IN JOINT TABLE) FROM TABLE MASTERDATA
    ETL_PRODUCT_NAME MASTERDATA.PRODUCT_NAME%TYPE;
    ETL_CUSTOMER_ACCOUNTTYPE MASTERDATA.CUSTOMER_ACCOUNTTYPE%TYPE;
    ETL_SUPPLIER_ID MASTERDATA.SUPPLIER_ID%TYPE;
    ETL_SUPPLIER_NAME MASTERDATA.SUPPLIER_NAME%TYPE;
    ETL_SALE_PRICE MASTERDATA.SALE_PRICE%TYPE;
    ETL_COUNT INT;
    
    
BEGIN
    OPEN DATASTREAM_CURSOR;
    LOOP  --LOOP OVER TRANSACTIONS TABLE
        -- FETCH MEANS THE UTILIZATION OF CURSOR TO RETRIEVE DATA FROM A QUERY
        FETCH DATASTREAM_CURSOR
        -- READ BATCHESIZE OF 100 TUPLES FROM TRANSACTIONS TABLE INTO CURSOR
        BULK COLLECT INTO DATA_INTEGRATION LIMIT 100;
        EXIT WHEN DATASTREAM_CURSOR%NOTFOUND;
        -- READ CURSOR TUPLE BY TUPLE
        FOR I IN DATA_INTEGRATION.FIRST .. DATA_INTEGRATION.LAST    
            LOOP
                -- RETRIEVE RELATED TUPLES FROM MASTERDATA TABLE
                SELECT PRODUCT_NAME,CUSTOMER_ACCOUNTTYPE,SUPPLIER_ID,SUPPLIER_NAME,SALE_PRICE
                INTO ETL_PRODUCT_NAME,ETL_CUSTOMER_ACCOUNTTYPE,ETL_SUPPLIER_ID,ETL_SUPPLIER_NAME,ETL_SALE_PRICE
                FROM MASTERDATA
                WHERE PRODUCT_ID = DATA_INTEGRATION(I).PRODUCT_ID;
                
                /* CHECK IF INFO EXISTS IN DIMENSION TABLES. 
                    IF YES: UPDATE FACT TABLE. 
                    IF NO: UPDATE ALL */
        
                --  CHECK  D_PRODUCT TABLE
                SELECT COUNT(0) INTO ETL_COUNT FROM D_PRODUCTS     
                WHERE PRODUCT_ID = DATA_INTEGRATION(I).PRODUCT_ID;
                IF ETL_COUNT = 0 THEN
                    --  INSERT NEW DATA INTO D_PRODUCT TABLE
                    INSERT INTO D_PRODUCTS VALUES (DATA_INTEGRATION(I).PRODUCT_ID, ETL_PRODUCT_NAME);
                END IF;
                
                --  CHECK  D_CUSTOMERS TABLE
                SELECT COUNT(0) INTO ETL_COUNT         
                FROM D_CUSTOMERS         
                WHERE CUSTOMER_ID = DATA_INTEGRATION(I).CUSTOMER_ID;
                IF ETL_COUNT = 0 THEN
                    --  INSERT NEW DATA INTO D_CUSTOMER TABLE
                    INSERT INTO D_CUSTOMERS VALUES(DATA_INTEGRATION(I).CUSTOMER_ID, DATA_INTEGRATION(I).CUSTOMER_NAME, 
                    ETL_CUSTOMER_ACCOUNTTYPE);
                END IF;
                    
                --  CHECK  D_OUTLET TABLE
                SELECT COUNT(0) INTO ETL_COUNT     
                FROM D_OUTLET     
                WHERE OUTLET_ID = DATA_INTEGRATION(I).OUTLET_ID;
                IF ETL_COUNT = 0 THEN
                    --  INSERT NEW DATA INTO D_OUTLET TABLE
                    INSERT INTO D_OUTLET VALUES (DATA_INTEGRATION(I).OUTLET_ID, DATA_INTEGRATION(I).OUTLET_NAME);
                END IF;
                    
                --  CHECK  D_SUPPLIERS TABLE
                SELECT COUNT(0) INTO ETL_COUNT     
                FROM D_SUPPLIERS    
                WHERE SUPPLIER_ID = ETL_SUPPLIER_ID;
                IF ETL_COUNT = 0 THEN
                --  INSERT NEW DATA INTO D_SUPPLIER TABLE
                    INSERT INTO D_SUPPLIERS VALUES (ETL_SUPPLIER_ID, ETL_SUPPLIER_NAME);
                END IF;
                
                --  INSERT NEW DATA INTO F_SALES TABLE
                INSERT INTO F_SALES VALUES (DATA_INTEGRATION(I).DATASTREAM_ID,DATA_INTEGRATION(I).PRODUCT_ID, 
                DATA_INTEGRATION(I).CUSTOMER_ID,DATA_INTEGRATION(I).OUTLET_ID, 
                ETL_SUPPLIER_ID,DATA_INTEGRATION(I).D_DATE,DATA_INTEGRATION(I).QUANTITY_SOLD,
                ETL_SALE_PRICE,ETL_SALE_PRICE*DATA_INTEGRATION(I).QUANTITY_SOLD);
                
        
            END LOOP;
            COMMIT;
    END LOOP;
    CLOSE DATASTREAM_CURSOR;
END;
    